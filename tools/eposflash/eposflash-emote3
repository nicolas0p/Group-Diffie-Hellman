#!/usr/bin/env python3

import serial
import sys
import time
import os.path
import struct
import argparse

parser = argparse.ArgumentParser(description='EPOSMote III programmer')
parser.add_argument('-f','--file', help='.hex file to load', required=True)
parser.add_argument('-d','--dev', help='EPOSMote III device descriptor file', default='/dev/ttyACM0')
parser.add_argument('-s','--string', help='String to prepend to .hex file', required=False)
args = vars(parser.parse_args())

dev = args['dev']
hex_file_name = args['file']
prepend_string = args['string']

def msg_checksum(msg):
    lrc = 0
    for i in msg:
        lrc += i
    return struct.pack('B', ((lrc ^ 0xff) + 1) & 0xff)

handshake1_message = b'h\x00\x00\x00\x00\x00\x00\x00\x00'
handshake2_message = b'H\x00\x00\x00\x00\x00\x00\x00\x00'
end_message = b'e\x00\x00\x00\x00\x00\x00\x00\x00'

hex_offset = 0
sequence_number = 0
last_address = 0 # This script assumes increasing addresses. It will ignore addresses out of increasing order.

def hex_to_msg(line):
    def hex_checksum(line):
        acc = 0
        for i in range(0, len(line)-1, 2):
            acc += int(line[i:i+2], base=16)
        acc = acc & 0xff
        return abs(acc - 2**8) & 0xff

    def str_to_bytes(string):
        def split_by(seq, n):
            for i in range(0, len(seq), n):
                yield seq[i:i+n]
        return bytes(int(x, 16) for x in split_by(string, 2))

    global hex_offset
    global sequence_number
    global last_address

    #print(line)

    if line[-1:] == '\n':
        line = line[:-1]

    start_code = line[0]
    if start_code != ':':
        raise Exception("Start code is not ':'", line)
    c = hex_checksum(line[1 : -2])
    c0 = int(line[-2 : ], base=16)
    if c != c0:
        raise Exception("Wrong hex checksum", line, hex(c0), hex(c))

    ret = []

    byte_count = int(line[1:3], base=16)
    address = int(line[3:7], base=16) + hex_offset
    record_type = int(line[7:9], base=16)
    data = line[9 : 9+(2*byte_count)]
    #print(hex(byte_count), hex(address), hex(record_type), data, hex(hex_offset))

    if record_type == 0x00: # Data
        #print("Full data: ", data)
        if byte_count*2-7 >= 8:
            for i in range(0, byte_count*2 - 7, 8):
                if address > last_address:
                    msg = struct.pack('<H', sequence_number) # unsigned little-endian short
                    sequence_number += 1
                    msg += b'w' # write message
                    print(" Address: ", hex(address), end='\r')
                    d = struct.pack('>H',int(data[i:i+4], 16))
                    d += struct.pack('>H',int(data[i+4:i+8], 16))
                    #print("Data: ", data[i:i+8])
                    msg += struct.pack('<I',address) # unsigned little-endian integer
                    msg += d
                    #msg += struct.pack('<I',int(data[i:i+8], 16)) # unsigned little-endian integer
                    msg += msg_checksum(msg)
                    ret.append(msg)
                    last_address = address
                address += 4
            i+=8 # in Python, the variable holds the last valid value of the loop
        else:
            i = 0

        if (i < byte_count*2) and (byte_count*2 - i < 4):
            if address > last_address:
                msg = struct.pack('<H', sequence_number) # unsigned little-endian short
                sequence_number += 1
                msg += b'w' # write message
                print(" Address: ", hex(address), end='\r')
                d = struct.pack('>H',int(data[i:], 16))
                d += struct.pack('>H', 0)
                #print("Data: ", d)
                msg += struct.pack('<I',address) # unsigned little-endian integer
                msg += d
                #msg += struct.pack('<I',int(data[i:i+8], 16)) # unsigned little-endian integer
                msg += msg_checksum(msg)
                ret.append(msg)
                last_address = address
            address += 4

        elif i < byte_count*2:
            if address > last_address:
                msg = struct.pack('<H', sequence_number) # unsigned little-endian short
                sequence_number += 1
                msg += b'w' # write message
                print(" Address: ", hex(address), end='\r')
                d = struct.pack('>H',int(data[i:i+4], 16))
                d += struct.pack('>H',int(data[i+4:], 16))
                #print("Data: ", d)
                msg += struct.pack('<I',address) # unsigned little-endian integer
                msg += d
                #msg += struct.pack('<I',int(data[i:i+8], 16)) # unsigned little-endian integer
                msg += msg_checksum(msg)
                ret.append(msg)
                last_address = address
            address += 4

        return ret

    elif record_type == 0x01: # End Of file
        msg = struct.pack('<H', sequence_number)
        sequence_number += 1
        msg += end_message
        msg += msg_checksum(msg)
        ret.append(msg)
        return ret

    elif record_type == 0x02: # Extended Segment Address
        pass

    elif record_type == 0x03: # Start Segment Address
        pass

    elif record_type == 0x04: # Extended Linear Address
        hex_offset = int(data, 16) << 16

    elif record_type == 0x05: # Start Linear Address
        pass

    return []


if not os.access(hex_file_name, os.R_OK):
    print("Error: can't read file" , hex_file_name)
    sys.exit(1)


print("Waiting for", dev, "to appear")
while not os.path.exists(dev) or not os.access(dev, os.W_OK):
    pass

print(dev, "found, trying to open it")

mote = serial.Serial(baudrate = 115200, port=dev, timeout=0.5)
mote.close()
mote.open()

print(dev, "Opened.")
if prepend_string:
    msg = bytes(prepend_string,'utf-8')
    print("Sending data before handshake:", msg)
    mote.write(msg)

print("Sending handshake messages until a response is detected")
print("===== This is what the mote said =====")

msg = struct.pack('<H', sequence_number) + handshake1_message
msg += msg_checksum(msg)

sequence_number += 1

response = struct.pack('<H', sequence_number) + handshake2_message
response += msg_checksum(response)
handshake = False
while not handshake:
    mote.write(msg)
    time.sleep(0.1)
    k = mote.read(mote.inWaiting())
    if response in k:
        handshake = True
    if len(k) > 0:
        print(k)

print("======================================")
print("Handshake response detected!")

sequence_number += 1

print("Opening file", hex_file_name, "...")
with open(hex_file_name, 'r') as hex_file:
    print("Done! Parsing .hex file and sending it to the mote...")
    for line in hex_file:
        ret = hex_to_msg(line)
        for msg in ret:
            acked = False
            while not acked:
                #print('\n',msg)
                mote.write(msg)
                mote.flush()
                k = mote.read(len(msg))
                if k == msg:
                    acked = True
                else:
                    print('wrong ACK! expected:', msg, 'got:', k)
                    print('Resending...')
    print('\nDone!')
