# EPOS Makefile Definitions

# Functions
GETTK		= $(shell sed -n -e '/^.* $(1)[ ]*=.*;.*$$/s/^.* =[ ]*\(.*\)[ ]*;.*$$/\1/p' $(2) | head -1 2> /dev/null)
DBSEC           = $(1) 0x$(shell objdump -h $(1) | grep $(2) | tr -s ' ' | cut -d ' ' -f 5 2> /dev/null)
TOLOWER         = $(shell echo $(1) | tr A-Z a-z)

# Paths, prefixes and suffixes
EPOS		:= $(abspath $(dir $(filter %makedefs, $(MAKEFILE_LIST))))
TOP		:= $(EPOS)
INCLUDE		:= $(TOP)/include
SRC		:= $(TOP)/src
APP		:= $(TOP)/app
BIN		:= $(TOP)/bin
LIB		:= $(TOP)/lib
IMG		:= $(TOP)/img
ETC		:= $(TOP)/etc
DOC             := $(TOP)/doc
TOOLS           := $(TOP)/tools
LARCHNAME	:= arch
LMACHNAME	:= mach
LSYSNAME	:= sys
LINITNAME	:= init
LUTILNAME	:= util

# Makefile hacks
APPLICATIONS	:= $(subst .cc,,$(shell find $(APP) -name \*.cc -printf "%f\n"))

ifeq ($(words $(APPLICATIONS)),1)
ifndef APPLICATION
APPLICATION	:= $(word 1, $(APPLICATIONS))
endif
else
PRECLEAN	:= clean1
endif

ifndef APPLICATION
ifneq ($(abspath $(dir $(filter %makefile, $(MAKEFILE_LIST)))),$(TOP))
.PHONY: error
error:
		@echo "ERROR: On a multiple applications setup, make must be invoked from $(TOP)!"
		@exit -1
endif
endif

# System configuration
ifneq ("$(wildcard $(APP)/$(APPLICATION)_traits.h)","")
TRAITS          = $(APP)/$(APPLICATION)_traits.h
else
TRAITS          = $(INCLUDE)/system/traits.h
endif
ifeq ($(words $(call GETTK,MEM_BASE,$(TRAITS))),1)
MACH_TRAITS     = $(TRAITS)
else
MACH_TRAITS     = $(INCLUDE)/machine/$(MACH)/$(MMOD)_traits.h
endif
ifeq ($(words $(call GETTK,ENDIANESS,$(TRAITS))),1)
ARCH_TRAITS     = $(TRAITS)
else
ARCH_TRAITS     = $(INCLUDE)/architecture/$(ARCH)/traits.h
endif
MODE		= $(call TOLOWER,$(call GETTK,MODE,$(TRAITS)))
ARCH		= $(call TOLOWER,$(call GETTK,ARCHITECTURE,$(TRAITS)))
MACH            = $(call TOLOWER,$(call GETTK,MACHINE,$(TRAITS)))
MMOD            = $(call TOLOWER,$(call GETTK,MODEL,$(TRAITS)))
CPUS		= $(call GETTK,CPUS,$(TRAITS))
NODES		= $(call GETTK,NODES,$(TRAITS))
LIBARCH		= $(LIB)/lib$(LARCHNAME)_$(ARCH).a
LIBMACH		= $(LIB)/lib$(LMACHNAME)_$(ARCH).a
LIBSYS		= $(LIB)/lib$(LSYSNAME)_$(ARCH).a
LIBINIT		= $(LIB)/lib$(LINITNAME)_$(ARCH).a
LIBUTIL		= $(LIB)/lib$(LUTILNAME)_$(ARCH).a
LARCH		= $(LARCHNAME)_$(ARCH)
LMACH		= $(LMACHNAME)_$(ARCH)
LSYS		= $(LSYSNAME)_$(ARCH)
LINIT		= $(LINITNAME)_$(ARCH)
LUTIL		= $(LUTILNAME)_$(ARCH)

# Compiler prefixes
ia32_COMP_PREFIX	:= /home/evsasse/workspace/gcc-4.4.4/bin/ia32-
armv7_COMP_PREFIX	:= /home/evsasse/workspace/arm/gcc-4.4.4/bin/arm-
avr8_COMP_PREFIX        := /usr/local/avr/gcc-4.4.4/bin/avr-
COMP_PREFIX		= $($(ARCH)_COMP_PREFIX)

# Boot Memory Map
MEM_BASE	    = $(call GETTK,MEM_BASE,$(MACH_TRAITS))
MEM_TOP		    = $(call GETTK,MEM_TOP,$(MACH_TRAITS))
MEM_SIZE	    = $(shell echo "(`printf "%d" $(MEM_TOP)` + 1 - `printf "%d" $(MEM_BASE)`) / 1024"|bc)
BOOT_ADDR	    = $(call GETTK,BOOT,$(MACH_TRAITS))
SETUP_ADDR	    = $(call GETTK,SETUP,$(MACH_TRAITS))
INIT_ADDR	    = $(call GETTK,INIT,$(MACH_TRAITS))
SYS_CODE_ADDR	= $(call GETTK,SYS_CODE,$(MACH_TRAITS))
SYS_DATA_ADDR	= $(call GETTK,SYS_DATA,$(MACH_TRAITS))
APP_CODE_ADDR	= $(call GETTK,APP_CODE,$(MACH_TRAITS))
APP_DATA_ADDR	= $(call GETTK,APP_DATA,$(MACH_TRAITS))
BOOT_LENGTH_MIN	= $(call GETTK,BOOT_LENGTH_MIN,$(MACH_TRAITS))
BOOT_LENGTH_MAX = $(call GETTK,BOOT_LENGTH_MAX,$(MACH_TRAITS))
NODE_ID         = $(call GETTK,NODE_ID,$(MACH_TRAITS))
N_NODES         = $(call GETTK,N_NODES,$(MACH_TRAITS))
UUID            = $(shell cat /proc/sys/kernel/random/uuid | sed 's/-//g')

#Machine specifics
pc_CC_FLAGS             := -Wa,--32
pc_AS_FLAGS             := --32
pc_LD_FLAGS             :=
pc_EMULATOR             = qemu-system-i386 -smp $(CPUS) -m $(MEM_SIZE)k -nographic -no-reboot -fda
pc_DEBUGGER             := gdb
pc_FLASHER              :=

ifeq ($(MMOD),zynq)
cortex_CC_FLAGS         := -mcpu=cortex-a9 -mfpu=fpa
cortex_AS_FLAGS         := -mcpu=cortex-a9 -mfpu=fpa
cortex_EMULATOR         = qemu-system-arm -machine xilinx-zynq-a9 -m $(MEM_SIZE)k -serial null -serial mon:stdio -nographic -no-reboot -kernel
else
cortex_CC_FLAGS         := -mcpu=cortex-m3 -mthumb -mno-thumb-interwork -mfpu=fpa
cortex_AS_FLAGS         := -mcpu=cortex-m3 -mthumb -mfpu=fpa
cortex_EMULATOR         = qemu-system-arm -machine lm3s811evb -m $(MEM_SIZE)k -serial stdio -no-reboot -kernel
endif
cortex_LD_FLAGS         :=
cortex_DEBUGGER         := arm-none-eabi-gdb
ifndef ACM
ACM = 0
endif
cortex_FLASHER          = $(TOOLS)/eposflash/eposflash-$(MMOD) -d /dev/ttyACM$(ACM) -f

atmega_CC_FLAGS         := -mmcu=atmega128 -Wno-inline
atmega_AS_FLAGS         := -mmcu=atmega128
atmega_LD_FLAGS         := -m avr5
atmega_EMULATOR         =
atmega_DEBUGGER         =
atmega_FLASHER          = $(TOOLS)/eposflash/eposflash-$(MMOD)

$(MACH)_CODE_NAME       := .init
$(MACH)_DATA_NAME       := .data
ifeq ($(DEBUG),1)
MACH_CC_FLAGS           := -g -feliminate-unused-debug-symbols $($(MACH)_CC_FLAGS)
MACH_AS_FLAGS           := -g $($(MACH)_AS_FLAGS)
else
MACH_CC_FLAGS           := $($(MACH)_CC_FLAGS)
MACH_AS_FLAGS           := $($(MACH)_AS_FLAGS)
endif
MACH_LD_FLAGS           := $($(MACH)_LD_FLAGS)
MACH_CODE_NAME          := $($(MACH)_CODE_NAME)
MACH_DATA_NAME          := $($(MACH)_DATA_NAME)
ifeq ($(DEBUG),1)
MACH_EMULATOR           = $(subst -m ,-gdb tcp::1235 -S -m ,$($(MACH)_EMULATOR))
else
MACH_EMULATOR           = $($(MACH)_EMULATOR)
endif
MACH_DEBUGGER           = $(TERM) $($(MACH)_DEBUGGER) -ex "target remote:1235" -ex "set confirm off"
MACH_FLASHER            := $($(MACH)_FLASHER)

# Architecture specifics
ARCH_LITTLE	:= little
ARCH_BIG	:= big
ARCH_ENDIANESS	= $(ARCH_$(call GETTK,ENDIANESS,$(ARCH_TRAITS)))
ARCH_WORD_SIZE	= $(call GETTK,WORD_SIZE,$(ARCH_TRAITS))
ARCH_CLOCK	= $(call GETTK,CLOCK,$(ARCH_TRAITS))

# Tools and flags to compile system tools
TCC		:= gcc -ansi -c -Werror
TCCFLAGS	:= -m32 -Wall -O2 -I$(INCLUDE)

TCXX		:= g++ -c -ansi -fno-exceptions -std=c++0x
TCXXFLAGS	:= -m32 -Wall -O2 -I$(INCLUDE)

TCPP		:= gcc -E
TCPPFLAGS	:= -I$(INCLUDE)

TLD		:= gcc
TLDFLAGS	:= -m32

# Tools and flags to compile applications
ACC		= $(BIN)/eposcc $(MACH_CC_FLAGS) -c -ansi -O2
ACXX		= $(BIN)/eposcc $(MACH_CC_FLAGS) -c -ansi -O2
AF77		= $(BIN)/eposcc $(MACH_CC_FLAGS) -c -ansi -O2
ALD		= $(BIN)/eposcc --$(MODE)
ALDFLAGS	:= --gc-sections $(if $(MACH_FLASHER),--omagic,--nmagic)

# Tools and flags to compile the system
AR		= $(COMP_PREFIX)ar
ARFLAGS		:= rcs

AS		= $(COMP_PREFIX)as
ASFLAGS		= $(MACH_AS_FLAGS)

CC		= $(COMP_PREFIX)gcc -ansi -c
CCFLAGS		= $(MACH_CC_FLAGS) -O2 -nostdinc -Wall -Werror -I$(INCLUDE)
CCLIB		= `$(CC) $(MACH_CC_FLAGS) -print-file-name=`

CPP		= $(COMP_PREFIX)gcc -E
CPPFLAGS	= $(MACH_CC_FLAGS) -I$(INCLUDE)

CXX		= $(COMP_PREFIX)g++ -c --no-exceptions --no-rtti --no-use-cxa-atexit -std=c++0x
CXXFLAGS	= $(MACH_CC_FLAGS) -O2 -nostdinc -Wall -Werror -fdata-sections -ffunction-sections -I$(INCLUDE)

CLEAN		:= rm -f
CLEANDIR	:= rm -rf

DD		:= dd

DEBUGGER	= $(MACH_DEBUGGER)

EMULATOR	= $(MACH_EMULATOR)

FLASHER 	= $(MACH_FLASHER)

INSTALL		:= install

LD              = $(COMP_PREFIX)ld
LDFLAGS         = $(MACH_LD_FLAGS) -nostdlib -L$(LIB) -Bstatic

MAKE            := make --print-directory
MAKECLEAN       := make -i clean
MAKETEST        := make --no-print-directory --silent
MAKEFLAGS       := --no-builtin-rules

MKBI            := $(BIN)/eposmkbi $(EPOS)

OBJCOPY         = $(COMP_PREFIX)objcopy
OBJCOPYFLAGS    := -R .note -R .comment

OBJDUMP         = $(COMP_PREFIX)objdump
OBJDUMPFLAGS    :=

SHELL		:= bash

STRIP		= $(COMP_PREFIX)strip -R .note -R .comment

TCPDUMP		:= tcpdump -tttttennvvvXXr

TEE		:= tee

TERM		:= xterm -e

TOUCH		:= touch


# Rules
lib%.o: lib%.cc
		$(CXX) $(CXXFLAGS) $<

%_test_traits.h: %_test.cc
		$(INSTALL) -m 755 $(INCLUDE)/system/traits.h $@

%_test.o: %_test.cc
		$(ACXX) $(ACXXFLAGS) $<

%_test.o: %_test.c
		$(ACC) $(ACCFLAGS) $<

%_test: %_test.o
		$(ALD) $(ALDFLAGS) $< -o $@

%.img: %
		$(MKBI) $@ $<

%.out: %.img
		$(EMULATOR) $< | $(TEE) $@

%.net: %.pcap
		$(TCPDUMP) $< > $@

%.o: %.cc
		$(CXX) $(CXXFLAGS) $<

%.o: %.c
		$(CC) $(CCFLAGS) $<

%.s: %.S
		$(CPP) $(CPPFLAGS) $< -o $@

%.o: %.s
		$(AS) $(ASFLAGS) $< -o $@

%: %.cc
		$(CXX) $(CXXFLAGS) $<
		$(LD) $(LDFLAGS) %@.o -o $@

%: %.c
		$(CC) $(CCFLAGS) $<
		$(LD) $(LDFLAGS) %@.o -o $@

(%.o): %.o
		$(AR) $(ARFLAGS) $@ $^

%.hex: %
		$(OBJCOPY) -I elf32-$(ARCH_ENDIANESS) -O ihex $< $<.tmp
		$(MKBI) $@ $<.tmp
		$(CLEAN) $<.tmp

%.key: %.cc
		$(EPOSANL) $<

%.key: %.c
		$(EPOSANL) $<

.PRECIOUS: %.o
